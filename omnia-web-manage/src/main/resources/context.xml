<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:axon="http://www.axonframework.org/schema/core"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.axonframework.org/schema/core
        http://www.axonframework.org/schema/axon-core.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd">


    <!-- properties -->
    <context:property-placeholder ignore-unresolvable="true" location="classpath*:/config.properties" />

    <context:annotation-config/>


    <!-- ================================================ -->
    <!-- Example with a single interceptor ref            -->
    <!-- ================================================ -->
    <!--
    <bean id="commandBus" class="org.axonframework.commandhandling.SimpleCommandBus">
         <property name="interceptors"> <bean class="org.axonframework.commandhandling.interceptors.SpringTransactionalInterceptor">
         <property name="transactionManager" ref="transactionManager"/> </bean> </property>
    </bean>
    -->

    <axon:command-bus id="commandBus" />

    <!--	<bean id="eventBus" class="org.axonframework.eventhandling.SimpleEventBus" />-->
    <axon:event-bus id="eventBus" />

    <bean id="commandGateway" class="org.axonframework.commandhandling.gateway.CommandGatewayFactoryBean">
        <property name="commandBus" ref="commandBus"/>
    </bean>

    <context:component-scan base-package="com.omnia">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <bean id="actorSystem" class="akka.actor.ActorSystem" factory-method="create" destroy-method="shutdown" >
    </bean>

    <!--<tx:annotation-driven transaction-manager="transactionManager"/>-->

    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
    <!--</bean>-->

    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
        <!--&lt;!&ndash; 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass &ndash;&gt;-->
        <!--<property name="driverClassName" value="${jdbc.driver}" />-->

        <!--&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
        <!--<property name="url" value="${jdbc.url}" />-->
        <!--<property name="username" value="${jdbc.username}" />-->
        <!--<property name="password" value="${jdbc.password}" />-->

        <!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
        <!--<property name="initialSize" value="${pool.minIdle}" />-->
        <!--<property name="minIdle" value="${pool.minIdle}" />-->
        <!--<property name="maxActive" value="${pool.maxActive}" />-->

        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="60000" />-->

        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->

        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="300000" />-->

        <!--<property name="validationQuery" value="SELECT 'x'" />-->
        <!--<property name="testWhileIdle" value="true" />-->
        <!--<property name="testOnBorrow" value="false" />-->
        <!--<property name="testOnReturn" value="false" />-->

        <!--&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;-->
        <!--<property name="filters" value="stat" />-->
    <!--</bean>-->

    <!--<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"-->
          <!--p:dataSource-ref="dataSource" />-->


    <bean id="getEventStoreEventStore" class="com.omnia.infrastructure.eventstore.geteventstore.GetEventStoreEventStore">
        <constructor-arg  value="user" />
        <constructor-arg  ref="actorSystem" />
    </bean>

    <bean id="eventStore" class="org.axonframework.eventstore.mongo.MongoEventStore">
        <constructor-arg ref="mongoTemplate"/>
    </bean>

    <bean id="sagaRepository" class="org.axonframework.saga.repository.mongo.MongoSagaRepository">
        <constructor-arg ref="mongoSagaTemplate"/>
        <property name="resourceInjector">
            <bean class="org.axonframework.saga.spring.SpringResourceInjector"/>
        </property>
    </bean>

    <bean id="mongoSpringTemplate" class="org.springframework.data.mongodb.core.MongoTemplate">
        <constructor-arg name="mongo" ref="mongo"/>
        <constructor-arg name="databaseName" value="omnia-web"/>
    </bean>

    <bean id="mongoTemplate" class="org.axonframework.eventstore.mongo.DefaultMongoTemplate">
        <constructor-arg index="0" ref="mongo"/>
        <constructor-arg index="1" value="omnia-web"/>
        <constructor-arg index="2" value="domainevents"/>
        <constructor-arg index="3" value="snapshotevents"/>
        <constructor-arg index="4">
            <null/>
        </constructor-arg>
        <constructor-arg index="5">
            <null/>
        </constructor-arg>
    </bean>

    <bean id="mongoSagaTemplate" class="org.axonframework.saga.repository.mongo.DefaultMongoTemplate">
        <constructor-arg index="0" ref="mongo"/>
        <constructor-arg index="1" value="omnia-web"/>
        <constructor-arg index="2" value="snapshotevents"/>
        <constructor-arg index="3">
            <null/>
        </constructor-arg>
        <constructor-arg index="4">
            <null/>
        </constructor-arg>
    </bean>

    <!--<bean id="authenticationHandler" class="com.omnia.user.command.handler.AuthenticationHandler">-->
        <!--<property name="repository" ref="userESRepository" />-->
        <!--<property name="userRepository" ref="userRepository" />-->
    <!--</bean>-->

    <!--<bean id="userRepository" class="com.omnia.user.repository.impl.UserQueryRepository" />-->
    <axon:event-sourcing-repository id="userRepository"
                                    aggregate-type="com.omnia.module.command.user.domain.User"
                                    event-bus="eventBus"
                                    event-store="getEventStoreEventStore" >
        <!--<axon:snapshotter-trigger event-count-threshold="5" snapshotter-ref="snapshotter"/>-->
    </axon:event-sourcing-repository>

    <!--<axon:aggregate-command-handler id="userCommandHandler" aggregate-type="com.omnia.user.domain.User" repository="userRepository" command-bus="commandBus" />-->

    <!--<bean id="snapshotter" class="org.axonframework.eventsourcing.SpringAggregateSnapshotter">-->
        <!--<property name="eventStore" ref="eventStore"/>-->
        <!--<property name="executor" ref="taskExecutor"/>-->
    <!--</bean>-->

    <!--<bean id="taskExecutor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">-->
        <!--<property name="corePoolSize" value="2"/>-->
        <!--<property name="maxPoolSize" value="5"/>-->
        <!--<property name="waitForTasksToCompleteOnShutdown" value="true"/>-->
    <!--</bean>-->

    <mongo:mongo id="mongo" host="${mongodb.host}" port="${mongodb.port}"/>

    <axon:annotation-config />
</beans>